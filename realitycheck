#!/usr/bin/python3

# Either loop over all IPs or loop only over a certain set
# defined by the label argument passed from commandline.
#
# The loop runs a http request and the exit code is used to
# decide if the host is reachable or not.
#
# The list if IPs is hardcoded in dict style with each matching
# label as a value to the IP.

import sys
import requests
import http.server
import socketserver
import os

# Hardcoded dictionary of IPs with matching labels
address_dict={
'159.65.63.221':['dig','one','ubuntu'],
'157.230.30.0':['dig','two','stream'],
'157.230.30.1':['dig','three','ubuntu']
}

### preflight checks

### sys.args handling
def set_method():
    global method
    if len(sys.argv[1:]) == 0:
        method = 'all'
        return
    for arg in sys.argv[1:]:
        if arg == 'server':
            method = 'server'
        else:
            method = str(arg)

### Server part
def start_server():
    server_dir = '/my/realitycheck/'
    port = 666
    handler = http.server.SimpleHTTPRequestHandler
    os.chdir(server_dir)
    try:
        with socketserver.TCPServer(("", port), handler) as httpd:
            httpd.serve_forever()
    except:
        sys.exit(2)

### Client part
def match_method(method):
    global target_ip
    target_ip = []
    if method == 'all':
        for ip in address_dict.keys():
            target_ip.append(ip)
    else:
        for ip,label in address_dict.items():
            if method in label:
                target_ip.append(ip)

def send_request(ip):
    try:
        r = requests.get('http://' + ip + ':666', timeout=2)
        if r.status_code != 200:
            print(f"unexpected status code returned: {r.status_code}") #debug
        else:
            print(f"{ip} is reachbale") #debug
            print(f"index.html: {r.text.rstrip()}") #debug
    except:
            print(f"server {ip} not reachable") #debug

# Main
if __name__ == '__main__':
    if len(sys.argv) > 2:
        print(f"too many arguments given")
        sys.exit(2)
    set_method()
    if method == 'server':
        start_server()
    else:
        match_method(method)

    for ip in target_ip:
        send_request(ip)
