#!/usr/bin/python3

import sys
import requests
import http.server
import socketserver
import os
from multiprocessing import Pool

### presets
#basedir = '/my/realitycheck/'
basedir = '/Users/Paul/Projects/realitycheck/'
config = str(basedir + 'config')
server_dir = basedir
port = 666
### preflight checks
def preflight_checks():
    if len(sys.argv) > 2:
        print(f"too many arguments given") #debug
        sys.exit(2)
    if not os.path.isfile(config):
        print(f"Missing config file: {config}") #debug
        sys.exit(2)
### sys.args handling
def set_method():
    global method
    if len(sys.argv[1:]) == 0:
        method = 'all'
        return
    for arg in sys.argv[1:]:
        if arg == 'server':
            method = 'server'
        else:
            method = str(arg)
### make target dictionary
def make_address_dict():
    global address_dict
    address_dict = {}
    f = open(config, 'r')
    for line in f:
        address_dict[(line.rstrip().split())[0]] = (line.rstrip().split())[1:]
### Server part
def start_server():
    handler = http.server.SimpleHTTPRequestHandler
    os.chdir(server_dir)
    try:
        with socketserver.TCPServer(("", port), handler) as httpd:
            httpd.serve_forever()
    except:
        sys.exit(2)
### Client part
def find_target_ips(method):
    global target_ips
    target_ips = []
    if method == 'all':
        for ip in address_dict.keys():
            target_ips.append(ip)
    else:
        for ip,label in address_dict.items():
            if method in label:
                target_ips.append(ip)
### Send the request, return index.html
def send_request(ip):
    try:
        r = requests.get('http://' + ip + ':' + str(port), timeout=1)
        if r.status_code != 200:
            print(f"unexpected status code returned: {r.status_code}") #debug
        else:
            print(f"{ip} is reachbale") #debug
            print(f"index.html: {r.text.rstrip()}") #debug
    except:
        print(f"server {ip} not reachable") #debug
### Prevent thread overflow
def build_thread_controll():
    if len(target_ips) > 2:
        thread_control = 5
    else:
        thread_control = 1
    return thread_control

### Main
def main():
    preflight_checks()
    set_method()
    make_address_dict()
    if method == 'server':
        start_server()
    else:
        find_target_ips(method)
    with Pool(build_thread_controll()) as p:
        p.map(send_request, target_ips)

###
if __name__ == '__main__':
    main()
