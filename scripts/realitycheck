#!/usr/bin/python3

import sys
import requests
import http.server
import socketserver
import os
import configparser
from multiprocessing import Pool

### preflight checks
def preflight_checks():
    if len(sys.argv) > 2:
        print(f"too many arguments given") #debug
        sys.exit(2)
### parse config
def return_config_for(*vars):
    configfile = os.path.dirname(os.getcwd()) + '/lib/realitycheck.cfg'
    defaults = os.path.dirname(os.getcwd()) + '/lib/realitycheck.cfg.defaults'
    if not os.path.isfile(configfile):
        configfile = defaults
        if not os.path.isfile(configfile):
            print(f"Error: {configfile} does not exist")
            sys.exit(2)
    conf_dict = {}
    config = configparser.ConfigParser()
    config.read(configfile)
    try:
        for var in vars:
            conf_dict[var] = config['CUSTOM'][var]
    except:
        print(f"Error: {vars} is not configured in {configfile}") #debug
        sys.exit(2)
    return conf_dict
### start server or parse client checks
def set_method():
    global method
    if len(sys.argv[1:]) == 0:
        method = 'all'
        return
    for arg in sys.argv[1:]:
        if arg == 'server':
            method = 'server'
        else:
            method = str(arg)
### make target dictionary
def make_address_dict():
    global address_dict
    address_dict = {}
    addresses = return_config_for('addresses')['addresses']
    try:
        f = open(addresses, 'r')
        for line in f:
            address_dict[(line.rstrip().split())[0]] = (line.rstrip().split())[1:]
    except:
        print(f"Error: {addresses} does not exist")
        sys.exit(2)
### launch local server
def start_server():
    handler = http.server.SimpleHTTPRequestHandler
    os.chdir(globalconfig['server_dir'])
    try:
        with socketserver.TCPServer(("", globalconfig['port']), handler) as httpd:
            httpd.serve_forever()
    except:
        sys.exit(2)
### define actual targets
def find_target_ips(method):
    global target_ips
    target_ips = []
    if method == 'all':
        for ip in address_dict.keys():
            target_ips.append(ip)
    else:
        for ip,label in address_dict.items():
            if method in label:
                target_ips.append(ip)
### send the request, return index.html
def send_request(ip):
    try:
        r = requests.get('http://' + ip + ':' + return_config_for('port')['port'], timeout=1)
        if r.status_code != 200:
            print(f"unexpected status code returned: {r.status_code}") #debug
        else:
            print(f"{ip} is reachbale") #debug
            print(f"index.html: {r.text.rstrip()}") #debug
    except:
        print(f"server {ip} not reachable") #debug
### prevent thread overflow
def build_thread_controll():
    if len(target_ips) > 2:
        thread_control = 5
    else:
        thread_control = 1
    return thread_control

### main
def main():
    preflight_checks()
    set_method()
    make_address_dict()
    if method == 'server':
        start_server()
    else:
        find_target_ips(method)
    with Pool(build_thread_controll()) as p:
        p.map(send_request, target_ips)

###
if __name__ == '__main__':
    main()
