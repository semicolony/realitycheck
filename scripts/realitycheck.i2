#!/usr/bin/python3

import os
import argparse
from configparser import ConfigParser as configparser
from sys import exit, argv

### setting vars
def set_vars():
    global _self
    global _cwd
    global _dwd
    global _default_conf
    global _conf
    _cwd = str(os.getcwd())
    _dwd = str(os.path.dirname(_cwd))
    _self = argv[0]
    _default_conf = '/etc/realitycheck/realitycheck.cfg'
    _conf = _cwd + '/lib/realitycheck.cfg'

### warn/error func
def _warning(input):
    print(f"WARN: {input}")

def _error(input,err):
    print(f"ERROR: {input}")
    if err:
        print(f"Exception: {err}")
    exit(1)

### parse the arguments
def parse_arguments():
    global METHOD
    global TARGETS
    global OPTIONS
    global SHOW
    parser = argparse.ArgumentParser(description = "Usage for " + _self)
    parser.add_argument(
            "-m",
            help="set method, either server or check",
            choices=['server','check']
    )
    parser.add_argument(
            "-o",
            nargs="+",
            help="set any options (none defined yet)",
            metavar=''
    )
    parser.add_argument(
            "-t",
            nargs="+",
            help="set targets, either single host or group",
            metavar=''
    )
    parser.add_argument(
            "--show",
            action='store_true',
            help="Shows current config",
    )
    args = parser.parse_args()
    METHOD = args.m
    TARGETS = args.t
    OPTIONS = args.o
    SHOW = args.show

### read the config file
def read_configfile():
    global running_conf
    from_conf = {}
    try:
        if os.access(_conf, os.R_OK):
            running_conf = _conf
            config = configparser()
            config.read(_conf)
            print(config['CUSTOM']['port'])
            print(f"reached")
        elif os.access(_default_conf, os.R_OK):
            running_conf = _default_conf
    except Exception as err:
        _error(f"Problem reading config file.", err)
#    print(f"{running_conf} will be used") #debug


### show config file variables
def show_config():
    print(f"This should print the running_conf variables")
    exit(0)

### build the listener
def build_serverside(port):
    print(f"build the server, listening on input port")
### start the listener
# OR
### build the target dictionary
### send requests
### store request replies

### thread control

def main():
    set_vars()
    parse_arguments()
    read_configfile()
    if SHOW:
        show_config()

###
if __name__ == '__main__':
    main()
